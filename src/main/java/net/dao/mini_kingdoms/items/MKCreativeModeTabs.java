package net.dao.mini_kingdoms.items;

import net.dao.mini_kingdoms.Mini_kingdoms;
import net.dao.mini_kingdoms.blocks.MKBlocks;
import net.minecraft.core.registries.Registries;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.RegistryObject;

public class MKCreativeModeTabs {
    public static final DeferredRegister<CreativeModeTab> CREATIVE_MODE_TABS =
            DeferredRegister.create(Registries.CREATIVE_MODE_TAB, Mini_kingdoms.MODID);

    public static final RegistryObject<CreativeModeTab> FOODS_AND_RELATED_STUFF = CREATIVE_MODE_TABS.register("foods_and_related_stuff", ()-> CreativeModeTab.builder().icon(()-> new ItemStack(MKItems.BONE_MARROW.get()))
            .title(Component.translatable("creativetab.mini_kingdoms.foods_and_related_stuff"))
            .displayItems((ItemDisplayParameters, output) -> {
                output.accept(MKItems.BONE_MARROW.get());
                output.accept(MKItems.BEAR_MEAT.get());
                output.accept(MKItems.BLAZE_BLOOD.get());
                output.accept(MKItems.DOLPHIN_FIN.get());
                output.accept(MKItems.GLOW_SQUID_EYE.get());
                output.accept(MKItems.DONKEY_MULE_MEAT.get());
                output.accept(MKItems.HORSE_MEAT.get());
                output.accept(MKItems.RABBIT_FOOT_FOOD.get());
                output.accept(MKItems.TURTLE_SCALE.get());
                output.accept(MKItems.CAT_FEET.get());
                output.accept(MKItems.ARMADILLO_SCALE.get());
                output.accept(MKItems.STOMACH.get());
                output.accept(MKItems.LIVER.get());
                output.accept(MKItems.LUNGS.get());
                output.accept(MKItems.HEART.get());
                output.accept(MKItems.CRAZY_BLOOD.get());
                output.accept(MKItems.STEW_BASE.get());
                output.accept(MKItems.BLAZE_BLOOD_STEW_BASE.get());
                output.accept(MKItems.GLOW_SQUID_EYE_STEW_BASE.get());
                output.accept(MKItems.RABBIT_FOOT_FOOD_STEW_BASE.get());
                output.accept(MKItems.DOLPHIN_FIN_STEW_BASE.get());
                output.accept(MKItems.DONKEY_MULE_MEAT_STEW_BASE.get());
                output.accept(MKItems.HORSE_MEAT_STEW_BASE.get());
                output.accept(MKItems.CAT_FEET_STEW_BASE.get());
                output.accept(MKItems.TURTLE_SCALE_STEW_BASE.get());
                output.accept(MKItems.ARMADILLO_SCALE_STEW_BASE.get());
                output.accept(MKItems.STOMACH_STEW_BASE.get());
                output.accept(MKItems.LIVER_STEW_BASE.get());
                output.accept(MKItems.LUNGS_STEW_BASE.get());
                output.accept(MKItems.HEART_STEW_BASE.get());
                output.accept(MKItems.BEAR_STEW.get());
                output.accept(MKItems.BLAZE_BLOOD_STEW.get());
                output.accept(MKItems.GLOW_SQUID_EYE_STEW.get());
                output.accept(MKItems.RABBIT_FOOT_FOOD_STEW.get());
                output.accept(MKItems.DOLPHIN_FIN_STEW.get());
                output.accept(MKItems.DONKEY_MULE_MEAT_STEW.get());
                output.accept(MKItems.HORSE_MEAT_STEW.get());
                output.accept(MKItems.CAT_FEET_STEW.get());
                output.accept(MKItems.TURTLE_SCALE_STEW.get());
                output.accept(MKItems.ARMADILLO_SCALE_STEW.get());
                output.accept(MKItems.STOMACH_STEW.get());
                output.accept(MKItems.LIVER_STEW.get());
                output.accept(MKItems.LUNGS_STEW.get());
                output.accept(MKItems.HEART_STEW.get());
            }).build());
    public static final RegistryObject<CreativeModeTab> CATCHERS_AND_ASSOCIATED_ITEMS = CREATIVE_MODE_TABS.register("catchers_and_associated_items", ()-> CreativeModeTab.builder().icon(()-> new ItemStack(MKItems.LEATHER_NET.get()))
            .title(Component.translatable("creativetab.mini_kingdoms.catchers_and_associated_items"))
            .displayItems((ItemDisplayParameters, output) -> {
              output.accept(MKItems.LEATHER_NET.get());
              output.accept(MKItems.SOFT_LEATHER_NET.get());
              output.accept(MKItems.STRENGTHENED_LEATHER_NET.get());
              output.accept(MKItems.VILLAGER_CATCHER.get());
              output.accept(MKItems.PASSIVE_MOB_CATCHER.get());
              output.accept(MKItems.AGGRESSIVE_MOB_CATCHER.get());
              output.accept(MKItems.NET_SOFTENER.get());
            }).build());

    public static final RegistryObject<CreativeModeTab> CORES = CREATIVE_MODE_TABS.register("cores", ()-> CreativeModeTab.builder().icon(()-> new ItemStack(MKItems.MINE_SUPER_CORE.get()))
            .title(Component.translatable("creativetab.mini_kingdoms.cores"))
            .displayItems((ItemDisplayParameters, output) -> {
                output.accept(MKBlocks.TINY_CORE_ORE_MINE.get());
                output.accept(MKBlocks.SMALL_CORE_ORE_MINE.get());
                output.accept(MKBlocks.BELOW_AVERAGE_CORE_ORE_MINE.get());
                output.accept(MKBlocks.AVERAGE_CORE_ORE_MINE.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_CORE_ORE_MINE.get());
                output.accept(MKBlocks.BIG_CORE_ORE_MINE.get());
                output.accept(MKBlocks.LARGE_CORE_ORE_MINE.get());
                output.accept(MKBlocks.HUGE_CORE_ORE_MINE.get());
                output.accept(MKBlocks.GIANT_CORE_ORE_MINE.get());
                output.accept(MKBlocks.SUPER_CORE_ORE_MINE.get());
                output.accept(MKBlocks.TINY_CORE_ORE_FARM.get());
                output.accept(MKBlocks.SMALL_CORE_ORE_FARM.get());
                output.accept(MKBlocks.BELOW_AVERAGE_CORE_ORE_FARM.get());
                output.accept(MKBlocks.AVERAGE_CORE_ORE_FARM.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_CORE_ORE_FARM.get());
                output.accept(MKBlocks.BIG_CORE_ORE_FARM.get());
                output.accept(MKBlocks.LARGE_CORE_ORE_FARM.get());
                output.accept(MKBlocks.HUGE_CORE_ORE_FARM.get());
                output.accept(MKBlocks.GIANT_CORE_ORE_FARM.get());
                output.accept(MKBlocks.SUPER_CORE_ORE_FARM.get());
                output.accept(MKBlocks.TINY_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.SMALL_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.BELOW_AVERAGE_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.AVERAGE_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.BIG_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.LARGE_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.HUGE_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.GIANT_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.SUPER_CORE_ORE_BIOME.get());
                output.accept(MKBlocks.TINY_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.SMALL_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.BELOW_AVERAGE_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.AVERAGE_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.BIG_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.LARGE_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.HUGE_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.GIANT_CORE_ORE_BUILDING.get());
                output.accept(MKBlocks.SUPER_CORE_ORE_BUILDING.get());
                output.accept(MKItems.MINE_TINY_CORE.get());
                output.accept(MKItems.MINE_SMALL_CORE.get());
                output.accept(MKItems.MINE_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.MINE_AVERAGE_CORE.get());
                output.accept(MKItems.MINE_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.MINE_BIG_CORE.get());
                output.accept(MKItems.MINE_LARGE_CORE.get());
                output.accept(MKItems.MINE_HUGE_CORE.get());
                output.accept(MKItems.MINE_GIANT_CORE.get());
                output.accept(MKItems.MINE_SUPER_CORE.get());
                output.accept(MKItems.FARM_TINY_CORE.get());
                output.accept(MKItems.FARM_SMALL_CORE.get());
                output.accept(MKItems.FARM_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.FARM_AVERAGE_CORE.get());
                output.accept(MKItems.FARM_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.FARM_BIG_CORE.get());
                output.accept(MKItems.FARM_LARGE_CORE.get());
                output.accept(MKItems.FARM_HUGE_CORE.get());
                output.accept(MKItems.FARM_GIANT_CORE.get());
                output.accept(MKItems.FARM_SUPER_CORE.get());
                output.accept(MKItems.BIOME_TINY_CORE.get());
                output.accept(MKItems.BIOME_SMALL_CORE.get());
                output.accept(MKItems.BIOME_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.BIOME_AVERAGE_CORE.get());
                output.accept(MKItems.BIOME_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.BIOME_BIG_CORE.get());
                output.accept(MKItems.BIOME_LARGE_CORE.get());
                output.accept(MKItems.BIOME_HUGE_CORE.get());
                output.accept(MKItems.BIOME_GIANT_CORE.get());
                output.accept(MKItems.BIOME_SUPER_CORE.get());
                output.accept(MKItems.BUILDING_TINY_CORE.get());
                output.accept(MKItems.BUILDING_SMALL_CORE.get());
                output.accept(MKItems.BUILDING_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.BUILDING_AVERAGE_CORE.get());
                output.accept(MKItems.BUILDING_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.BUILDING_BIG_CORE.get());
                output.accept(MKItems.BUILDING_LARGE_CORE.get());
                output.accept(MKItems.BUILDING_HUGE_CORE.get());
                output.accept(MKItems.BUILDING_GIANT_CORE.get());
                output.accept(MKItems.BUILDING_SUPER_CORE.get());
                output.accept(MKItems.VILLAGE_TINY_CORE.get());
                output.accept(MKItems.VILLAGE_SMALL_CORE.get());
                output.accept(MKItems.VILLAGE_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.VILLAGE_AVERAGE_CORE.get());
                output.accept(MKItems.VILLAGE_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.VILLAGE_BIG_CORE.get());
                output.accept(MKItems.VILLAGE_LARGE_CORE.get());
                output.accept(MKItems.VILLAGE_HUGE_CORE.get());
                output.accept(MKItems.VILLAGE_GIANT_CORE.get());
                output.accept(MKItems.VILLAGE_SUPER_CORE.get());
                output.accept(MKItems.TOWN_TINY_CORE.get());
                output.accept(MKItems.TOWN_SMALL_CORE.get());
                output.accept(MKItems.TOWN_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.TOWN_AVERAGE_CORE.get());
                output.accept(MKItems.TOWN_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.TOWN_BIG_CORE.get());
                output.accept(MKItems.TOWN_LARGE_CORE.get());
                output.accept(MKItems.TOWN_HUGE_CORE.get());
                output.accept(MKItems.TOWN_GIANT_CORE.get());
                output.accept(MKItems.TOWN_SUPER_CORE.get());
                output.accept(MKItems.CITY_TINY_CORE.get());
                output.accept(MKItems.CITY_SMALL_CORE.get());
                output.accept(MKItems.CITY_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.CITY_AVERAGE_CORE.get());
                output.accept(MKItems.CITY_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.CITY_BIG_CORE.get());
                output.accept(MKItems.CITY_LARGE_CORE.get());
                output.accept(MKItems.CITY_HUGE_CORE.get());
                output.accept(MKItems.CITY_GIANT_CORE.get());
                output.accept(MKItems.CITY_SUPER_CORE.get());
                output.accept(MKItems.LARGE_CITY_TINY_CORE.get());
                output.accept(MKItems.LARGE_CITY_SMALL_CORE.get());
                output.accept(MKItems.LARGE_CITY_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.LARGE_CITY_AVERAGE_CORE.get());
                output.accept(MKItems.LARGE_CITY_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.LARGE_CITY_BIG_CORE.get());
                output.accept(MKItems.LARGE_CITY_LARGE_CORE.get());
                output.accept(MKItems.LARGE_CITY_HUGE_CORE.get());
                output.accept(MKItems.LARGE_CITY_GIANT_CORE.get());
                output.accept(MKItems.LARGE_CITY_SUPER_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_TINY_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_SMALL_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_AVERAGE_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_BIG_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_LARGE_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_HUGE_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_GIANT_CORE.get());
                output.accept(MKItems.REGIONAL_CAPITAL_SUPER_CORE.get());
                output.accept(MKItems.CAPITAL_TINY_CORE.get());
                output.accept(MKItems.CAPITAL_SMALL_CORE.get());
                output.accept(MKItems.CAPITAL_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.CAPITAL_AVERAGE_CORE.get());
                output.accept(MKItems.CAPITAL_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.CAPITAL_BIG_CORE.get());
                output.accept(MKItems.CAPITAL_LARGE_CORE.get());
                output.accept(MKItems.CAPITAL_HUGE_CORE.get());
                output.accept(MKItems.CAPITAL_GIANT_CORE.get());
                output.accept(MKItems.CAPITAL_SUPER_CORE.get());
                output.accept(MKItems.KINGDOM_TINY_CORE.get());
                output.accept(MKItems.KINGDOM_SMALL_CORE.get());
                output.accept(MKItems.KINGDOM_BELOW_AVERAGE_CORE.get());
                output.accept(MKItems.KINGDOM_AVERAGE_CORE.get());
                output.accept(MKItems.KINGDOM_ABOVE_AVERAGE_CORE.get());
                output.accept(MKItems.KINGDOM_BIG_CORE.get());
                output.accept(MKItems.KINGDOM_LARGE_CORE.get());
                output.accept(MKItems.KINGDOM_HUGE_CORE.get());
                output.accept(MKItems.KINGDOM_GIANT_CORE.get());
                output.accept(MKItems.KINGDOM_SUPER_CORE.get());
            }).build());

    public static final RegistryObject<CreativeModeTab> CORNERSTONES = CREATIVE_MODE_TABS.register("cornerstones", ()-> CreativeModeTab.builder().icon(()-> new ItemStack(MKItems.BADLANDS_BIOME_CORNERSTONE.get()))
            .withTabsBefore(CORES.getId())
            .withTabsAfter(CATCHERS_AND_ASSOCIATED_ITEMS.getId())
            .title(Component.translatable("creativetab.mini_kingdoms.cornerstones"))
            .displayItems((ItemDisplayParameters, output) -> {
                output.accept(MKItems.BADLANDS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.BAMBOO_JUNGLE_BIOME_CORNERSTONE.get());
                output.accept(MKItems.BEACH_BIOME_CORNERSTONE.get());
                output.accept(MKItems.BIRCH_FOREST_BIOME_CORNERSTONE.get());
                output.accept(MKItems.CHERRY_GROVE_BIOME_CORNERSTONE.get());
                output.accept(MKItems.COLD_OCEAN_BIOME_CORNERSTONE.get());
                output.accept(MKItems.DARK_FOREST_BIOME_CORNERSTONE.get());
                output.accept(MKItems.DEEP_COLD_OCEAN_BIOME_CORNERSTONE.get());
                output.accept(MKItems.DEEP_DARK_BIOME_CORNERSTONE.get());
                output.accept(MKItems.DEEP_FROZEN_OCEAN_BIOME_CORNERSTONE.get());
                output.accept(MKItems.DEEP_LUKEWARM_OCEAN_BIOME_CORNERSTONE.get());
                output.accept(MKItems.DEEP_OCEAN_BIOME_CORNERSTONE.get());
                output.accept(MKItems.DESERT_BIOME_CORNERSTONE.get());
                output.accept(MKItems.DRIPSTONE_CAVES_BIOME_CORNERSTONE.get());
                output.accept(MKItems.ERODED_BADLANDS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.FLOWER_FOREST_BIOME_CORNERSTONE.get());
                output.accept(MKItems.FOREST_BIOME_CORNERSTONE.get());
                output.accept(MKItems.FROZEN_OCEAN_BIOME_CORNERSTONE.get());
                output.accept(MKItems.FROZEN_PEAKS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.FROZEN_RIVER_BIOME_CORNERSTONE.get());
                output.accept(MKItems.GROVE_BIOME_CORNERSTONE.get());
                output.accept(MKItems.ICE_SPIKES_BIOME_CORNERSTONE.get());
                output.accept(MKItems.JAGGED_PEAKS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.JUNGLE_BIOME_CORNERSTONE.get());
                output.accept(MKItems.LUKEWARM_OCEANS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.LUSH_CAVES_BIOME_CORNERSTONE.get());
                output.accept(MKItems.MANGROVE_SWAMP_BIOME_CORNERSTONE.get());
                output.accept(MKItems.MEADOW_BIOME_CORNERSTONE.get());
                output.accept(MKItems.MUSHROOM_FIELDS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.OCEAN_BIOME_CORNERSTONE.get());
                output.accept(MKItems.OLD_GROWTH_BIRCH_FOREST_BIOME_CORNERSTONE.get());
                output.accept(MKItems.OLD_GROWTH_PINE_TAIGA_BIOME_CORNERSTONE.get());
                output.accept(MKItems.OLD_GROWTH_SPRUCE_TAIGA_BIOME_CORNERSTONE.get());
                output.accept(MKItems.PLAINS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.RIVER_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SAVANNA_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SAVANNA_PLATEAU_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SNOWY_BEACH_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SNOWY_SLOPES_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SNOWY_PLAINS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SNOWY_TAIGA_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SPARSE_JUNGLE_BIOME_CORNERSTONE.get());
                output.accept(MKItems.STONY_PEAKS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.STONY_SHORES_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SUNFLOWER_PLAINS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.SWAMP_BIOME_CORNERSTONE.get());
                output.accept(MKItems.TAIGA_BIOME_CORNERSTONE.get());
                output.accept(MKItems.WARM_OCEAN_BIOME_CORNERSTONE.get());
                output.accept(MKItems.WINDSWEPT_GRAVELLY_HILLS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.WINDSWEPT_HILLS_BIOME_CORNERSTONE.get());
                output.accept(MKItems.WINDSWEPT_SAVANNA_BIOME_CORNERSTONE.get());
                output.accept(MKItems.WINDSWEPT_FOREST_BIOME_CORNERSTONE.get());
                output.accept(MKItems.WOODED_BADLANDS_BIOME_CORNERSTONE.get());
            }).build());

    /*
    public static final RegistryObject<CreativeModeTab> STORES_AND_CRAFTMEN_SHOPS = CREATIVE_MODE_TABS.register("stores_and_craftmen_shops", () -> CreativeModeTab.builder().icon(()-> new ItemStack(MKBlocks.KINGDOM_CRAFTER.get()))
        .withTabsBefore(CORNERSTONES.getId())
        .title(Component.translatable("creativetab.mini_kingdoms.stores_and_craftmen_shops"))
        .displayItems((ItemDisplayParameters, output)->{
            output.accept(MKBlocks.GENERAL_STORE.get());
            output.accept(MKBlocks.GROCERY_STORE.get());
            output.accept(MKBlocks.BUTCHER.get());
            output.accept(MKBlocks.JEWELERY_STORE.get());
            output.accept(MKBlocks.BAKERY.get());
            output.accept(MKBlocks.FURNITURE_STORE.get());
            output.accept(MKBlocks.FLOWER_SHOP.get());
            output.accept(MKBlocks.ARMOUR_SHOP.get());
            output.accept(MKBlocks.WEAPONS_SHOP.get());
            output.accept(MKBlocks.TOOL_SHOP.get());
            output.accept(MKBlocks.LOG_YARD.get());
            output.accept(MKBlocks.JEWELER.get());
            output.accept(MKBlocks.ARMOURSMITH.get());
            output.accept(MKBlocks.WEAPONSMITH.get());
            output.accept(MKBlocks.TOOLSMITH.get());
    }).build());

    public static final RegistryObject<CreativeModeTab> MINES_AND_FARMS = CREATIVE_MODE_TABS.register("mines_and_farms", () -> CreativeModeTab.builder().icon(()-> new ItemStack(MKBlocks.KINGDOM_CRAFTER.get()))
            .withTabsBefore(STORES_AND_CRAFTMEN_SHOPS.getId())
            .title(Component.translatable("creativetab.mini_kingdoms.mines_and_farms"))
            .displayItems((ItemDisplayParameters, output)->{
                output.accept(MKBlocks.TINY_ORE_MINE.get());
                output.accept(MKBlocks.SMALL_ORE_MINE.get());
                output.accept(MKBlocks.BELOW_AVERAGE_ORE_MINE.get());
                output.accept(MKBlocks.AVERAGE_ORE_MINE.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_ORE_MINE.get());
                output.accept(MKBlocks.BIG_ORE_MINE.get());
                output.accept(MKBlocks.LARGE_ORE_MINE.get());
                output.accept(MKBlocks.HUGE_ORE_MINE.get());
                output.accept(MKBlocks.GIANT_ORE_MINE.get());
                output.accept(MKBlocks.SUPER_ORE_MINE.get());
                output.accept(MKBlocks.TINY_VEGGIE_FARM.get());
                output.accept(MKBlocks.SMALL_VEGGIE_FARM.get());
                output.accept(MKBlocks.BELOW_AVERAGE_VEGGIE_FARM.get());
                output.accept(MKBlocks.AVERAGE_VEGGIE_FARM.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_VEGGIE_FARM.get());
                output.accept(MKBlocks.BIG_VEGGIE_FARM.get());
                output.accept(MKBlocks.LARGE_VEGGIE_FARM.get());
                output.accept(MKBlocks.HUGE_VEGGIE_FARM.get());
                output.accept(MKBlocks.GIANT_VEGGIE_FARM.get());
                output.accept(MKBlocks.SUPER_VEGGIE_FARM.get());
                output.accept(MKBlocks.TINY_MONSTER_FARM.get());
                output.accept(MKBlocks.SMALL_MONSTER_FARM.get());
                output.accept(MKBlocks.BELOW_AVERAGE_MONSTER_FARM.get());
                output.accept(MKBlocks.AVERAGE_MONSTER_FARM.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_MONSTER_FARM.get());
                output.accept(MKBlocks.BIG_MONSTER_FARM.get());
                output.accept(MKBlocks.LARGE_MONSTER_FARM.get());
                output.accept(MKBlocks.HUGE_MONSTER_FARM.get());
                output.accept(MKBlocks.GIANT_MONSTER_FARM.get());
                output.accept(MKBlocks.SUPER_MONSTER_FARM.get());
                output.accept(MKBlocks.TINY_ANIMAL_FARM.get());
                output.accept(MKBlocks.SMALL_ANIMAL_FARM.get());
                output.accept(MKBlocks.BELOW_AVERAGE_ANIMAL_FARM.get());
                output.accept(MKBlocks.AVERAGE_ANIMAL_FARM.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_ANIMAL_FARM.get());
                output.accept(MKBlocks.BIG_ANIMAL_FARM.get());
                output.accept(MKBlocks.LARGE_ANIMAL_FARM.get());
                output.accept(MKBlocks.HUGE_ANIMAL_FARM.get());
                output.accept(MKBlocks.GIANT_ANIMAL_FARM.get());
                output.accept(MKBlocks.SUPER_ANIMAL_FARM.get());
            }).build());

    public static final RegistryObject<CreativeModeTab> FROM_HOUSES_TO_KINGDOMS = CREATIVE_MODE_TABS.register("from_houses_to_kingdoms", () -> CreativeModeTab.builder().icon(()-> new ItemStack(MKBlocks.KINGDOM_CRAFTER.get()))
            .withTabsBefore(MINES_AND_FARMS.getId())
            .title(Component.translatable("creativetab.mini_kingdoms.from_houses_to_kingdoms"))
            .displayItems((ItemDisplayParameters, output)->{
                output.accept(MKBlocks.TINY_HOUSE.get());
                output.accept(MKBlocks.SMALL_HOUSE.get());
                output.accept(MKBlocks.BELOW_AVERAGE_HOUSE.get());
                output.accept(MKBlocks.AVERAGE_HOUSE.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_HOUSE.get());
                output.accept(MKBlocks.BIG_HOUSE.get());
                output.accept(MKBlocks.LARGE_HOUSE.get());
                output.accept(MKBlocks.HUGE_HOUSE.get());
                output.accept(MKBlocks.GIANT_HOUSE.get());
                output.accept(MKBlocks.SUPER_HOUSE.get());
                output.accept(MKBlocks.TINY_VILLAGE.get());
                output.accept(MKBlocks.SMALL_VILLAGE.get());
                output.accept(MKBlocks.BELOW_AVERAGE_VILLAGE.get());
                output.accept(MKBlocks.AVERAGE_VILLAGE.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_VILLAGE.get());
                output.accept(MKBlocks.BIG_VILLAGE.get());
                output.accept(MKBlocks.LARGE_VILLAGE.get());
                output.accept(MKBlocks.HUGE_VILLAGE.get());
                output.accept(MKBlocks.GIANT_VILLAGE.get());
                output.accept(MKBlocks.SUPER_VILLAGE.get());
                output.accept(MKBlocks.TINY_TOWN.get());
                output.accept(MKBlocks.SMALL_TOWN.get());
                output.accept(MKBlocks.BELOW_AVERAGE_TOWN.get());
                output.accept(MKBlocks.AVERAGE_TOWN.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_TOWN.get());
                output.accept(MKBlocks.BIG_TOWN.get());
                output.accept(MKBlocks.LARGE_TOWN.get());
                output.accept(MKBlocks.HUGE_TOWN.get());
                output.accept(MKBlocks.GIANT_TOWN.get());
                output.accept(MKBlocks.SUPER_TOWN.get());
                output.accept(MKBlocks.TINY_CITY.get());
                output.accept(MKBlocks.SMALL_CITY.get());
                output.accept(MKBlocks.BELOW_AVERAGE_CITY.get());
                output.accept(MKBlocks.AVERAGE_CITY.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_CITY.get());
                output.accept(MKBlocks.BIG_CITY.get());
                output.accept(MKBlocks.LARGE_CITY.get());
                output.accept(MKBlocks.HUGE_CITY.get());
                output.accept(MKBlocks.GIANT_CITY.get());
                output.accept(MKBlocks.SUPER_CITY.get());
                output.accept(MKBlocks.TINY_LARGE_CITY.get());
                output.accept(MKBlocks.SMALL_LARGE_CITY.get());
                output.accept(MKBlocks.BELOW_AVERAGE_LARGE_CITY.get());
                output.accept(MKBlocks.AVERAGE_LARGE_CITY.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_LARGE_CITY.get());
                output.accept(MKBlocks.BIG_LARGE_CITY.get());
                output.accept(MKBlocks.LARGE_LARGE_CITY.get());
                output.accept(MKBlocks.HUGE_LARGE_CITY.get());
                output.accept(MKBlocks.GIANT_LARGE_CITY.get());
                output.accept(MKBlocks.SUPER_LARGE_CITY.get());
                output.accept(MKBlocks.TINY_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.SMALL_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.BELOW_AVERAGE_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.AVERAGE_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.BIG_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.LARGE_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.HUGE_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.GIANT_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.SUPER_REGIONAL_CAPITAL.get());
                output.accept(MKBlocks.TINY_CAPITAL.get());
                output.accept(MKBlocks.SMALL_CAPITAL.get());
                output.accept(MKBlocks.BELOW_AVERAGE_CAPITAL.get());
                output.accept(MKBlocks.AVERAGE_CAPITAL.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_CAPITAL.get());
                output.accept(MKBlocks.BIG_CAPITAL.get());
                output.accept(MKBlocks.LARGE_CAPITAL.get());
                output.accept(MKBlocks.HUGE_CAPITAL.get());
                output.accept(MKBlocks.GIANT_CAPITAL.get());
                output.accept(MKBlocks.SUPER_CAPITAL.get());
                output.accept(MKBlocks.TINY_KINGDOM.get());
                output.accept(MKBlocks.SMALL_KINGDOM.get());
                output.accept(MKBlocks.BELOW_AVERAGE_KINGDOM.get());
                output.accept(MKBlocks.AVERAGE_KINGDOM.get());
                output.accept(MKBlocks.ABOVE_AVERAGE_KINGDOM.get());
                output.accept(MKBlocks.BIG_KINGDOM.get());
                output.accept(MKBlocks.LARGE_KINGDOM.get());
                output.accept(MKBlocks.HUGE_KINGDOM.get());
                output.accept(MKBlocks.GIANT_KINGDOM.get());
                output.accept(MKBlocks.SUPER_KINGDOM.get());
            }).build());
    */

    public static void register(IEventBus eventBus) {
        CREATIVE_MODE_TABS.register(eventBus);
    }
}
